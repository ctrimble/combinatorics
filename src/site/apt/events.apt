Using events:

+-------------------------------+
  CombinatoricEngine engine = factory.createCombinationEngine(rank, A, A, A, B, B, C);
  engine.setHandler(new CombinatoricHandler() {
    public void swap( E newA, int ai, E newB, int bi )
    {

    }

    public void evaluate()
    {

    }
  };

  engine.start();
+-------------------------------+


Iterate all of the distinct pairings of (A,A,A,B,B,C) and (1,2,3,4) for length 3.  For example:
  ((A,1),(A,2),(B,3))

+-------------------------------+

  Integer[] numbers = new Integer[] { 1, 2, 3, 4 };
  Character[] letters = new Character[] { 'A', 'A', 'A', 'B', 'B', 'C' };

  final CombinatoricEngine<Integer> numberEngine = factory.createCombinationEngine(3, numbers);
  final CombinatoricEngine<Character> letterEngine = factory.createPermutationEngine(3, characters);

  final Object result[][] = new Object[3][2];

  letterEngine.setHandler(new CombinatoricHandler<Character>() {
    public void init( Character[] state ) {
      for( int i = 0; i < state.length; state++ ) {
        result[i][0] = state[i];
      }
    }

    public void swap( Character newA, int ai, Character newB, int bi ) {
      result[newA][0] = newA;
      result[newB][0] = newB;
    }

    public void replace( Character newObject, Character oldObject, int index ) {
      result[index][0] = newObject;
    }

    public void evaluate() {
      numberEngine.execute();
      numberEngine.reset();
    }
  });

  numberEngine.setHandler(new CombinatoricHandler<Integer>() {
    public void init( Integer[] state ) {
      for( int i = 0; i < state.length; state++ ) {
        result[i][1] = state[i];
      }
    }

    public void swap( Integer newA, int ai, Integer newB, int bi ) {
      result[newA][1] = newA;
      result[newB][1] = newB;
    }

    public void replace( Integer newObject, Integer oldObject, int index ) {
      result[index][1] = newObject;
    }

    public void evaluate() {
      System.out.println(Arrays.toString(result));
    }
  });

  letterEngine.execute();

+-------------------------------+
